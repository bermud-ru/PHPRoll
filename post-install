#!/usr/bin/env bash
#
# @category Installation PHPRoll Framework (CentOS 7.x, 8.x)
# @author Андрей Новиков <andrey@novikov.be>
# @data 07/12/2015
#

# Make sure only root can run our script
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

JQ=$(which jq)
if [ -z "$JQ" ]; then
#  wget https://github.com/stedolan/jq/releases/download/jq-1.6/jq-1.6.tar.gz
#  tar -xzf jq-1.6.tar.gz
#  cd jq-1.6
#  autoreconf -fi
#  ./configure && make && sudo make install​
OS="`uname`"
case $OS in
  'Linux')
    OS='Linux'
    if  [ -f /etc/debian_version ]; then
        OS='Debian'
        apt-get install jq
    elif [ -f /etc/redhat-release ]; then
        OS="Red Hat"
        yum install jq -y
    fi
    ;;
  'FreeBSD')
    OS='FreeBSD'
    pkg install jq -y
    ;;
  'WindowsNT')
    OS='Windows'
    ;;
  'Darwin').
    OS='Mac'
    ;;
  'SunOS')
    OS='Solaris'
    pacman -S install jq
    ;;
  'AIX') ;;
  *) ;;
esac
fi

######## CONFIG ##########################################################################
export vendor=vendor/bermud-ru/phproll
export serverRoot=$(pwd)
export PROJECT=${PWD##*/}
export DOMAIN=$(jq .install.domain ./composer.json)
export ADDRESS=$(jq .install.address ./composer.json)
export SSL_path=$(pwd)/etc/pki
export nginxbasicuser="alfatest"
export nginxbasicpass="beta456"
##########################################################################################

printf "Post-install scripting ...\n\n"
printf "Create folders structures\n"
mkdir -p ./public/css
mkdir -p ./public/js
mkdir -p ./Application/cli
mkdir -p ./Application/view
mkdir -p ./Application/extra
mkdir -p ./etc/nginx
mkdir -p ./etc/pki
#ln -s ../$vendor/public/maintenance ./public/maintenance
#ln -s ../$vendor/public/icons ./public/icons
cp -rf ./$vendor/public/* ./public/
cp -rf ./$vendor/config.php ./
cp -rf ./$vendor/.gitignore ./
cp -rf ./$vendor/.hgignore ./
cp -n ./$vendor/public/css/* ./public/css/
#cp -rf ./$vendor/public/* ./public/
for js in ./$vendor/public/js/*
do
 [ -f $js ] && cp -rf $js ./public/js/
done
cp -rf ./$vendor/Application/view/* ./Application/view/
cp -rf ./$vendor/Application/extra/* ./Application/extra/

if [ ! -z "$ADDRESS" ]; then
printf "Resolv domain\n"
cat << EOF >> /etc/hosts
${ADDRESS}   ${DOMAIN}
EOF
fi

mkdir -p ./etc/pki
mkdir -p /etc/pki/tls
if [ ! -f /etc/pki/tls/openssl.cnf ]; then
touch /etc/pki/tls/openssl.cnf
fi

printf "SSL creation\n"
#sudo openssl req -nodes -x509 -newkey rsa:2048 -keyout ./etc/pki/nginx.key -out ./etc/pki/nginx.crt -days 365 \
#  -subj "/C=$country/ST=$state/L=$locality/O=$organization/OU=$organizationalunit/CN=$commonname/emailAddress=$email" \
#  -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "[SAN]\nsubjectAltName=IP:127.0.0.1,DNS:phprest.server"))
if [ ! -f ./etc/pki/sertificat.cnf ]; then
cat << EOF > ./etc/pki/sertificat.cnf
#
# OpenSSL configuration file.
#

# Establish working directory.
dir					    = ./etc/pki

[ ca ]
default_ca				= CA_default

[ CA_default ]
serial					= $dir/serial
database				= $dir/nginxindex.txt
new_certs_dir			= $dir/certs
certificate				= $dir/nginx.pem
private_key				= $dir/private/nginx.pem
default_days			= 365
default_md				= md5
preserve				= no
email_in_dn				= no
nameopt					= default_ca
certopt					= default_ca
policy					= policy_match

[ policy_match ]
countryName				= match
stateOrProvinceName		= match
organizationName		= match
organizationalUnitName	= optional
commonName				= supplied
emailAddress			= optional

[ req ]
default_bits			= 2048			# Size of keys
default_keyfile			= key.pem		# name of generated keys
default_md				= md5			# message digest algorithm
string_mask				= nombstr		# permitted characters
distinguished_name		= req_distinguished_name
req_extensions			= v3_req

[ req_distinguished_name ]
# Variable name				Prompt string
#-------------------------	  ----------------------------------
0.organizationName		= Organization Name (company)
organizationalUnitName	= Organizational Unit Name (department, division)
emailAddress			= Email Address
emailAddress_max		= 40
localityName			= Locality Name (city, district)
stateOrProvinceName		= State or Province Name (full name)
countryName				= Country Name (2 letter code)
countryName_min			= 2
countryName_max			= 2
commonName				= Common Name (hostname, IP, or your name)
commonName_max			= 64

# Default values for the above, for consistency and less typing.
# Variable name				Value
#------------------------	  ------------------------------
0.organizationName_default	= My Company
localityName_default		= My Town
stateOrProvinceName_default	= State or Providence
countryName_default			= RU

[alt_names]
# Variable name				Prompt string
#-------------------------	  ----------------------------------
DNS.1                   = phprest.com
DNS.2                   = phprest1.com
DNS.3                   = phprest2.com

[ v3_ca ]
basicConstraints			  = CA:TRUE
subjectKeyIdentifier		= hash
authorityKeyIdentifier	= keyid:always,issuer:always

[ v3_req ]
subjectAltName          = @alt_names
basicConstraints			  = CA:FALSE
subjectKeyIdentifier		= hash
EOF
fi

if [ ! -f ./etc/pki/make ]; then
cat << EOF > ./etc/pki/make
#!/usr/bin/env bash
#
# Make sure only root can run our script
if [ "\$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi
######## CONFIG ########################################################################################################
#Country Name (2 letter code) [XX]:
country=BM
#State or Province Name (full name) []:
state=Bermudian
#Locality Name (eg, city) [Default City]:
locality=Bermudian
#Organization Name (eg, company) [Default Company Ltd]:
organization=None
#Organization unit (eg, dept.) [Default IT]:
organizationalunit=IT
#Common Name (eg, your name or your server's hostname) []:
commonname=DMZ
#Email Address []:
email=test@$DOMAIN
########################################################################################################################
openssl req -nodes -x509 -newkey rsa:2048 -keyout ./etc/pki/nginx.key -out ./etc/pki/nginx.crt -days 365 \
  -subj "/C=\$country/ST=\$state/L=\$locality/O=\$organization/OU=\$organizationalunit/CN=\$commonname/emailAddress=\$email" \
  -config ./etc/pki/sertificat.cnf
exit
EOF
fi
bash ./etc/pki/make

if [ ! -f ./etc/nginx/$PROJECT.conf ]; then
printf "NGINX configuration TLSv1.3 TLSv1.2\n"
export SALT=$( openssl rand 1000 | strings | grep -io '[0-9A-Za-z\.\/]' | head -n 16 | tr -d '\n')
cat << EOF > $serverRoot/htpasswd
$nginxbasicuser:$(perl -le 'print crypt("$ENV{'nginxbasicpass'}", "$ENV{'SALT'}")')
EOF

cat << EOF > ./etc/nginx/$PROJECT.conf
server {
    # access_log /var/log/nginx/$PROJECT.access.log combined;
    # error_log /var/log/nginx/$PROJECT.error.log warn;

    server_name $PROJECT.server www.$PROJECT.server;

    listen 80;
    return 302 https://\$server_name\$request_uri;
}

server {
    access_log /var/log/nginx/$PROJECT.access.log combined;
    error_log /var/log/nginx/$PROJECT.error.log warn;

    server_name $PROJECT www.$PROJECT;
    set \$host_path /srv/$PROJECT;
    root \$host_path/public;
    set \$app_bootstrap \"index.php\";
    index \$app_bootstrap;

    charset utf-8;

    listen 443 ssl;
    ssl_certificate     $SSL_path/nginx.crt;
    ssl_certificate_key $SSL_path/nginx.key;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-256-GCM-SHA384:TLS13-AES-128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers on;
    ssl_session_tickets on;
    #ssl_session_cache shared:SSL:10m;
    ssl_session_timeout 10m;
    ssl_ecdh_curve auto;

    set \$appenv dev;
    client_body_buffer_size 32K;

    location / {
        auth_basic "Restricted Area";
        auth_basic_user_file \$host_path/htpasswd;
        error_page 401 \$host_path/public/401.html;
        location = /401.html {
            allow all;
            auth_basic off;
            if (\$http_xhr_version) {
              add_header Content-Type application/json;
              return 401 '{"result": "warning", "message": "Under constraction!"}';
            }
        }
        error_page 500 502 503 504 \$host_path/public/500.html;
        try_files \$uri \$uri/ /\$app_bootstrap?\$args;
    }

    error_page 502 /502.html;
    location = /502.html {
        if (\$http_xhr_version) {
          add_header Content-Type application/json;
          return 502 '{"result": "error", "message": "Oops! system error!"}';
        }
        root /srv/$PROJECT/public;
        index 502.html;
    }

    location ~ \.(php|tmpl)\$ {
        set \$fsn /\$app_bootstrap;
        fastcgi_param appenv \"dev\";
        fastcgi_index \$app_botstrap;
        fastcgi_split_path_info ^(.+\.php|.+\.tmpl)(.*)\$;
        fastcgi_pass unix:/run/php-fpm/www.sock;

        if (-f \$document_root\$fastcgi_script_name){
            set \$fsn \$fastcgi_script_name;
        }

        try_files \$uri =404;
        fastcgi_param HTTPS on;
        include fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME  \$document_root\$fsn;

        fastcgi_param  PATH_INFO        \$fastcgi_path_info;
        fastcgi_param  PATH_TRANSLATED  \$document_root\$fsn;
    }

    location ~* \.(eot|ttf|woff|woff2)$ {
      expires max;
      access_log off;
      add_header Cache-Control public;
      add_header Access-Control-Allow-Origin *;
      fastcgi_hide_header Set-Cookie;
    }

    location ~* \.(css|js|txt|xml)$ {
      charset utf-8;
      expires max;
      access_log off;
      add_header Cache-Control public;
      fastcgi_hide_header Set-Cookie;
    }

    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF

printf "NGINX configs context resotre\n"
if [ ! -f /etc/nginx/conf.d/${DOMAIN}.conf ]; then
chown -R root:root $serverRoot/etc/nginx
restorecon -vF $serverRoot/etc/nginx/*
chcon -t httpd_config_t $serverRoot/etc/nginx/*
if [ ! -f /etc/nginx/conf.d/${PROJECT}.conf ]; then
ln -s $serverRoot/etc/nginx/$PROJECT.conf /etc/nginx/conf.d/$PROJECT.conf
fi
#ln -s $serverRoot/etc/nginx/$DOMAIN.conf /etc/nginx/conf.d/$DOMAIN.conf
chown -h root:wheel /etc/nginx/conf.d/*
restorecon -vF /etc/nginx/conf.d/*
fi
fi

printf "WEB context resotre\n"
chcon -R -t httpd_sys_content_t $serverRoot
semanage fcontext -a -t httpd_sys_content_t "${serverRoot}/(/.*)?"
exit