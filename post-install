#!/usr/bin/env bash
#
# @category Installation nginx with TLS 1.3 (CentOS 7.x, 8.x)
# @author Андрей Новиков <andrey@novikov.be>
# @data 07/12/2015
#

# Make sure only root can run our script
if [ "$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi

######## CONFIG ##########################################################################
project="phproll.server"
SSL_path=$(pwd)/setup/SSL
##########################################################################################

vendor=vendor/bermud-ru/phproll
printf "Post-install scripting ...\n\n"
printf "Folder structures\n"
mkdir -p ./public/css
mkdir -p ./public/js
mkdir -p ./Application/view
mkdir -p ./setup/nginx
mkdir -p ./setup/SSL
cp -rf ./$vendor/public/401.html ./public/
cp -rf ./$vendor/public/500.html ./public/
cp -rf ./$vendor/public/favicon.ico ./public/
cp -rf ./$vendor/public/index.php ./public/
cp -rf ./$vendor/public/robots.txt ./public/
cp -rf ./$vendor/config.php ./
cp -rf ./$vendor/.gitignore ./
cp -rf ./$vendor/.hgignore ./
cp -n ./$vendor/public/css/* ./public/css/
#cp -rf ./$vendor/public/js/* ./public/js/
for js in ./$vendor/public/js/*
do
 [ -f $js ] && cp -rf $js ./public/js/
done
cp -rf ./$vendor/Application/view/* ./Application/view/

printf "NGINX configuration\n"
cat << EOF > ./setup/nginx/$project.conf
server {
    # access_log /var/log/nginx/$project.access.log combined;
    # error_log /var/log/nginx/$project.error.log warn;

    server_name $project.server www.$project.server;

    listen 80;
    return 302 https://\$server_name\$request_uri;
}

server {
    access_log /var/log/nginx/$project.access.log combined;
    error_log /var/log/nginx/$project.error.log warn;

    server_name $project www.$project;
    set \$host_path /srv/\$project;
    root \$host_path/public;
    set \$app_bootstrap \"index.php\";
    index \$app_bootstrap;

    charset utf-8;

    listen 443 ssl;
    ssl_certificate     $SSL_path/nginx.crt;
    ssl_certificate_key $SSL_path/nginx.key;
    ssl_protocols TLSv1.3 TLSv1.2;
    ssl_ciphers 'TLS-CHACHA20-POLY1305-SHA256:TLS-AES-256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA512:DHE-RSA-AES256-GCM-SHA512:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES256-GCM-SHA384';
    ssl_ecdh_curve X448:secp521r1:secp384r1:prime256v1;
    ssl_session_cache shared:SSL:30m;
    ssl_session_timeout 30m;

    set \$appenv dev;

    location / {
        try_files \$uri \$uri/ /\$app_bootstrap?\$args;
    }

    location ~ ^/(protected|application|framework|themes/\w+/views) {
        deny  all;
    }

    location ~ \.(js|css|png|jpg|gif|swf|ico|pdf|mov|fla|zip|rar)\$ {
        try_files \$uri =404;
    }

    location ~ \.(php|tmpl)\$ {
        set \$fsn /\$app_bootstrap;
        fastcgi_param appenv \"dev\";
        fastcgi_index \$app_botstrap;
        fastcgi_split_path_info ^(.+\.php|.+\.tmpl)(.*)\$;
        fastcgi_pass unix:/run/php-fpm/php7.0-fpm.sock;

        if (-f \$document_root\$fastcgi_script_name){
            set \$fsn \$fastcgi_script_name;
        }

        try_files \$uri =404;
        fastcgi_param HTTPS on;
        include fastcgi_params;
        fastcgi_param  SCRIPT_FILENAME  \$document_root\$fsn;

        fastcgi_param  PATH_INFO        \$fastcgi_path_info;
        fastcgi_param  PATH_TRANSLATED  \$document_root\$fsn;
    }

    location ~ /\. {
        deny all;
        access_log off;
        log_not_found off;
    }
}
EOF
printf "NGINX webSocket configuration\n"
cat << EOF > ./setup/nginx/$project.wss.conf
upstream appserver {
    server 127.0.0.1:8001; # appserver_ip:ws_port
}

server {
    # client_wss_port
    listen 8000;

    ssl on;
    ssl_certificate     $SSL_path/nginx.crt;
    ssl_certificate_key $SSL_path/nginx.key;

    #so_keepalive on;
    tcp_nodelay on;

    #websocket_pass appserver;
    #websocket_buffer 1k;

    location / {
        # prevents 502 bad gateway error
        proxy_buffers 8 32k;
        proxy_buffer_size 64k;
        proxy_pass http://appserver;
        proxy_redirect off;

        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header Host $host;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-NginX-Proxy true;

        # WebSocket support
        proxy_http_version 1.1;
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_read_timeout 86400;
    }
}
EOF

mkdir -p ./setup/SSL
mkdir -p /etc/pki/tls
if [ ! -f /etc/pki/tls/openssl.cnf ]; then
touch /etc/pki/tls/openssl.cnf
fi

#sudo openssl req -nodes -x509 -newkey rsa:2048 -keyout ./setup/SSL/nginx.key -out ./setup/SSL/nginx.crt -days 365 \
#  -subj "/C=$country/ST=$state/L=$locality/O=$organization/OU=$organizationalunit/CN=$commonname/emailAddress=$email" \
#  -reqexts SAN -config <(cat /etc/pki/tls/openssl.cnf <(printf "[SAN]\nsubjectAltName=IP:127.0.0.1,DNS:phprest.server"))

cat << EOF > ./setup/SSL/sertificat.cnf
#
# OpenSSL configuration file.
#

# Establish working directory.

dir					    = ./setup/SSL

[ ca ]
default_ca				= CA_default

[ CA_default ]
serial					= $dir/serial
database				= $dir/nginxindex.txt
new_certs_dir			= $dir/certs
certificate				= $dir/nginx.pem
private_key				= $dir/private/nginx.pem
default_days			= 365
default_md				= md5
preserve				= no
email_in_dn				= no
nameopt					= default_ca
certopt					= default_ca
policy					= policy_match

[ policy_match ]
countryName				= match
stateOrProvinceName		= match
organizationName		= match
organizationalUnitName	= optional
commonName				= supplied
emailAddress			= optional

[ req ]
default_bits			= 2048			# Size of keys
default_keyfile			= key.pem		# name of generated keys
default_md				= md5			# message digest algorithm
string_mask				= nombstr		# permitted characters
distinguished_name		= req_distinguished_name
req_extensions			= v3_req

[ req_distinguished_name ]
# Variable name				Prompt string
#-------------------------	  ----------------------------------
0.organizationName		= Organization Name (company)
organizationalUnitName	= Organizational Unit Name (department, division)
emailAddress			= Email Address
emailAddress_max		= 40
localityName			= Locality Name (city, district)
stateOrProvinceName		= State or Province Name (full name)
countryName				= Country Name (2 letter code)
countryName_min			= 2
countryName_max			= 2
commonName				= Common Name (hostname, IP, or your name)
commonName_max			= 64

# Default values for the above, for consistency and less typing.
# Variable name				Value
#------------------------	  ------------------------------
0.organizationName_default	= My Company
localityName_default		= My Town
stateOrProvinceName_default	= State or Providence
countryName_default			= US

[alt_names]
# Variable name				Prompt string
#-------------------------	  ----------------------------------
DNS.1                   = phprest.com
DNS.2                   = phprest1.com
DNS.3                   = phprest2.com

[ v3_ca ]
basicConstraints			= CA:TRUE
subjectKeyIdentifier		= hash
authorityKeyIdentifier		= keyid:always,issuer:always

[ v3_req ]
subjectAltName              = @alt_names
basicConstraints			= CA:FALSE
subjectKeyIdentifier		= hash
EOF
cat << EOF > ./setup/SSL/make
#!/usr/bin/env bash
#
# Make sure only root can run our script
if [ "\$(id -u)" != "0" ]; then
   echo "This script must be run as root" 1>&2
   exit 1
fi
######## CONFIG ########################################################################################################
#Country Name (2 letter code) [XX]:
country=BM
#State or Province Name (full name) []:
state=Bermudian
#Locality Name (eg, city) [Default City]:
locality=Bermudian
#Organization Name (eg, company) [Default Company Ltd]:
organization=None
#Organization unit (eg, dept.) [Default IT]:
organizationalunit=IT
#Common Name (eg, your name or your server's hostname) []:
commonname=DMZ
#Email Address []:
email=test@$DOMAIN
########################################################################################################################
openssl req -nodes -x509 -newkey rsa:2048 -keyout ./nginx.key -out ./nginx.crt -days 365 \
  -subj "/C=\$country/ST=\$state/L=\$locality/O=\$organization/OU=\$organizationalunit/CN=\$commonname/emailAddress=\$email" \
  -config ./sertificat.cnf
exit
EOF
chmod +x ./setup/SSL/make
sudo ./setup/SSL/make
exit